/* @import url('https://fonts.googleapis.com/css2?family=Fira+Sans&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:ital,wght@1,600&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap'); */
@import url('https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:ital,wght@1,600&family=Poppins:wght@600&display=swap');
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    text-decoration: none;
    border: none;
    /* An outline is a line drawn outside the element's border. */
    outline: none;
    /* adds a smooth scrolling effect to the document */
    scroll-behavior: smooth;
    /* font-family: 'Barlow Semi Condensed', sans-serif; */
    font-family: 'Poppins', sans-serif;
}
html{
    scroll-behavior: smooth;
}
body{
    background-color: #080808;
    color: #fff; /* text color*/
}
.ul{
    margin-top: -8vw;
}
#header{
    width: 35vh;
    height: 114vh;
    background-image: url(./bg.jpg);
    background-repeat: no-repeat;
    background-size: 120%;
    /* border-radius: 20%; */
    background-position: 50% 50%;
    /* vh is viewport height, is a unit of measurement of css represents
    1% of height of viewport(the visible portion of webpage in browser window */
   /* if viewport ht=800px, 1vh=8px */
    margin-left: 132vh;
    margin-top: -11vh;
}

.logo{
    width: 50vh;
    height: 56vh;
    margin-left: -150vh;
    margin-top: -15vh;
}

nav{
    /* so that logo image and link both are side by side */
    display: flex;
    align-items: center;
    /* justify conten aligns the flexible container's items when items donot use all available space on main-axis */
    justify-content: space-between;
    /* flex-wrap: wrap; is applied to the nav element. This means that when the screen width becomes narrower and the navigation items cannot 
    fit on a single line, they will wrap onto the next line. */
    /* flex-wrap specifies whether the flexible items should wrap or not,if elements have no flexiblle items, the property has no effect */
    flex-wrap: wrap;
}

.container{
    /*  10px from top-bottom and 10% from left-right side */
    padding: 10px 10%;
}

nav ul li{
/* In the given code, the display: inline-block property is applied to the nav ul li selector. This is done to make the list items (li elements) in the navigation menu appear horizontally next to each other rather than vertically stacked.
By default, li elements are block-level elements, meaning they stack vertically on top of each other. However, by using display: inline-block, the li elements behave like inline elements (such as span or a), allowing them to appear next to each other horizontally within the same line.
The reason why display: flex is not used in this case is that the CSS flex property is applied to the parent container to create a flex container and control the layout of its child elements. In this particular code snippet, the nav ul li elements are already children of the nav ul 
container
, which is a flex container (as specified in the CSS code). Therefore, applying display: flex directly to nav ul li would have no effect since it is already a flex item within a flex container. */
    /* it makes the list items horizontally align */
    display: inline-block;
    list-style: none;
    /* to get some space between links, we'll use margin 10px from top-bottom and 20px from left-right */
    margin: 10px 20px;
    /* margin-top: -8vw; */
}

nav ul li a{
    color: white;
    text-decoration: none;
    font-size: 15px;
    position: relative;
    
}

/* adding hover effect */ 
 nav ul li a::after{
    content: '';
    /* to make the underline hidden, to try make width 100%, there'll be underline of all items */ 
    width:0;
    height: 3px;
    background: #cc3824;
    position: absolute;
    left: 0;
    bottom: -6px ;
    transition: 0.5s;
}

nav ul li a:hover::after{
   /* the line under the list items will be visible whenever the width will be 100% */
    width: 100%;
}

.header-text{
    /* margin-left: -78vw; */
    margin-left: -63vw;

}

.header-text h1{
    font-size:60px;
    margin-top: 20px;
}

.header-text h1 span{
    color:#cc3824;
}

/* --------ABOUT SECTION-------------------------- */
#about{
    /* 60 px from  top-bottom and 0 from left-right */
    padding: 60px 0;
    color:#fff;
}


.row{
    display: flex; /*as we're getting the content side by side*/
    justify-content: space-between;
    /* flex-wrap property sets whether flex items are forced onto one line or can wrap onto multiple lines, if wrapping is allowed, it sets the 
    direction that lines are stacked */
    flex-wrap: wrap;
}

.about-col-1{
    /* width of col1 */
    /* By setting flex-basis: 35%, it means that the column will occupy 35% of the available space along the main axis. */
    flex-basis: 35%;
}
.about-col-1 img{
width: 25vw;
border-radius: 15px;
margin-left: 24px;
}

.about-col-2{
    flex-basis: 60%; /* and we're getting 5% space between columns*/
}

.subtitle{ /* to change the font color and size of the About me text*/
    font-size: 45px;
    font-weight: 600;
    color:#fff;
}

.tab-titles{ /*this is for skills,experince and education*/
     /*as they're coming row wise, like in row1 skills, row2 eexperience and row3 education and we want them side by side, so we'll use display flex  */
    display: flex;
    margin: 20px 0 40px;
    /* justify-content: space-between; */
}

.tab-links{
    /* every tab link have margin 50 px to the right */
    margin-right: 50px;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    position: relative; /*the ele is positioned acc to the normal flow of the document and then offset relative to itself based on values left,
    right,top,bottom while if position:static then left,right,top, bottom would have no effect refer link:developer.mozilla.org*/
    /* By using position: relative on the parent, we create a new positioning context. This allows us to position the child element based on its
     relationship to the parent element, rather than the entire document.
*/
}

/* hover effect */
/* In CSS, the ::after pseudo-element is used to insert content after the content of an element. It is commonly used to add decorative elements, icons, or generated content to an element.

The ::after pseudo-element is created using the ::after selector. It is added as the last child of the selected element and can be styled independently using CSS properties. */
.tab-links::after{
    content: '';
    /* hidden width */
    /* so that if we're clicking on one tab-link, the other remmain hidden */
    width: 0;
    /* height of the underline */
    height: 3px;
    background: #cc3824;
    position: absolute; /*need to ask*/
    left:0;
    bottom:-8px;
    transition: 0.5s;
}

/* .tab-links:hover::after{ */
    /* as we want to apply effect only on skills part, so we'll create another class active-links to apply changes on that  */
    .tab-links.active-link::after{
    width:50%; /*visible half of the line*/
}

/* class to apply effect on skills tab-contents class */
.tab-contents ul li{
    list-style: none;
    /* 10 px from top-bottom and 0 from left-right */
    margin: 20px 0;
}
/* as we have added span tag in our li , so for this we'll add some color*/
.tab-contents ul li span{
    color:#cc3824;
    font-size: 16px;
    font-weight: bold;
}

.tab-contents{
    /* since we have so many lists, altho under different section ie experience, education etc, all will be displayed at once like a
    list on the screen, so what we want to do is, unless and until we click on skills or education or exerience, the content won't be dislayed, 
    so there's a property called display: none in our tab-contents class in css means it will hide all the tab contents*/
    display: none;
}

.tab-contents.active-tab{
    /* The display: block property is used  to control the visibility and layout of the tab content when it is active. */
    display: block; /*means the list which we earlier made hidden by doing display:none will be visible by using block property but only the list
    related to skills part will be visible*/
    /* to make the effect that only the content will be visible when we click on the skills part, we'll go to html and add onclick where we have 
    write SKILLS*/

}

/* ------------projects--------------- */

#projects{
    /* 30px from top-bottom and 0 from left-right */
    padding: 30px 0;
}

.projects-list{
    /* The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to 
    use floats and positioning. */
    display: grid;
    /* specifies the column size and display in columns*/
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    /* 	A shorthand property for the grid-row-gap and grid-column-gap properties */
    /* This property sets the gap or spacing between grid cells, both horizontally and vertically. In this case, it creates a gap of 40 pixels 
    between each cell in the grid. */
    grid-gap: 40px;
    margin-top: 50px;
}

.work{
    border-radius: 10px;
    position: relative;
 /* means the image if overlapping, if overflow is hidden, it'll automatically crop somewhat of their images */
   /* When overflow: hidden is applied to an element, it means that any content within that element which exceeds the dimensions of the container
    will be clipped or hidden from view. In other words, it creates a "hidden" overflow behavior. */
 overflow:hidden;
  
}

.work1{
    width: 266px;
    height: 474px;
}
.work2{
    width: 276px;
    height: 474px;
}
.work3{
    width: 276px;
    height: 474px;
}
.work img{
    width:100%;
    border-radius: 10px;
    /* This ensures that the images are displayed as block-level elements, allowing them to take up the full width available within their container
     and allowing other elements to flow around them. */
    display: block;
    /* transform is written in hover effect of work img, transition is just delaying the transform effect by 0.5s */
    transition: transform 0.5s;
    transition: height 0.5s;
}
.work2 img{
    width:100%;
    border-radius: 10px;
    /* display: block; */
    height: 474px;
}
.work3 img{
    width:100%;
    border-radius: 10px;
    /* display: block; */
    height: 474px;
}
.layer{
    background: linear-gradient(rgba(0,0,0,0.6), #c00e0e);
    border-radius: 10px;
    position: absolute;
    /*by doing height:0. it makes the written text have 0 height, as we don't want to make it visible  */
    height: 0;
    /* the layer will be full if left:0, if we do left :10px, then it'll show layer removing 10px */
    left: 0;
    bottom: 0;
    /* making the text hidden  */
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    /*flex-direction:column as we wanted to display the text column wise */
    flex-direction: column;
    /* some space in left and right */
    padding: 0px 50px;
    text-align: center;
    font-size: 14px;
    /* the height is from hover .layer, since we made the content hidden ny making height:0
    so,whenever user points his mouse at the photo, the hover effect would make it visible
    and the transition would make it more pleasing */
    transition: height 0.5s;
}
.layer h3{
    font-weight:bolder ;
    margin-bottom: 20px;
}

.layer a{

    margin-top: 20px;
    color: #9f0e0e;
    text-decoration: none;
    font-size: 18px;
    /* setting the height of the line present in the element */
    line-height: 60px;
    background: #fff;
    width: 55px;
    height: 55px;
    border-radius: 50%;
    text-align: center;
    
}
.work:hover img{
    /* to add transition , have to add transition property in work img */
    transform: scale(1.1); /*what it'll do is, is slightly zoom in whenever mouse will hover on img*/
}
/* to display the content written on the image i.e like Project name and description */
.work:hover .layer{
    height: 100%; 
    /*as we did make height to 0 in layer1 layer2 to make hover effect , but it too made the content written on it hidden, 
    so to do that, we'll be adding here height=100% so that when mouse hover on img, it'll display the content of layer,and to display 
    the hover effect efficiently, make transition:height 0.5s in layer */   
   }
.layer1{
    width: 266px;
    /* height: 474px; */
    /* to create hover effect,need to make height to 0 so that it'll become visible only when the mouse will hover */
    /* height:0; */
   
    
}
.layer2{
    width: 276px;
    /* height: 474px; */
    /* to create hover effect,need to make height to 0 so that it'll become visible only when the mouse will hover */
    /* height:0; */
}



/*for button See More */
.btn{
    display: block;
    margin: 50px auto;
    /* The fit-content behaves as fit-content(stretch). In practice this means that the box will use the available space, but 
    never more than max-content.
    When used as laid out box size for width, height, min-width, min-height, max-width and max-height the maximum and minimum 
    sizes refer to the content size */
    width: fit-content;
    border: 1px solid #9f0e0e;
    padding: 12px 40px;
    border-radius: 10px;
    text-decoration: none;
    color: #fff;
    transition: background 0.5s;
}

/* adding hover effect on button */
.btn:hover{
    /* add transition for this in .btn */
    background: #c00e0e;   
}


.contact-left{
    flex-basis: 35%;
}
/* Set the initial length of the flex items */
.contact-right{
    flex-basis: 60%;

}

/* design the left-side */
.contact-left p i{
    color: #9f0e0e;
    margin-right: 15px;
    margin-top: 10px;
    font-size: 25px;
}
/* designing social-media icons */
.social-icons{
    margin-top: 30px;
}
.social-icons a{
    text-decoration: none;
    font-size: 25px;
    margin-right: 15px; /*it's making the space betwen every icon*/
    color: #ababab;
    /* The CSS Display property with value inline-block renders an
     element according to content’s width or provided width whichever is greater, it does not force a line break until parent element’s width is fully utilized. */
    display: inline-block;
    transition: transform 0.5s;
}

/* add hover effect on social icons */
.social-icons a:hover{
    color: #9f0e0e;
    transform: translateY(-5px); /*icons will moving up when mouse will hover on icons*/   
}

.btn.btn2{
    text-decoration: none;
    color: #fff;
    display: inline-block;
    background:transparent;
    padding: 10px ;
    /* margin: 10px; */
    width: fit-content;
    
}

.btn.btn2:hover{
    background-color:#9f0e0e;
    color:white;
    /* horizontal-vertical-blur-color */
    box-shadow: 0 10px 20px #9f0e0e;   
}

/* right side contact information */
.contact-right form{
    width: 100%;
}

form input, form textarea{
    /* setting width to 100% of their container */
    width: 100%;
    border: 0;
    /* Removes the default outline style when the elements are focused. */
    outline: none;
    background: #262626;
    padding: 15px;
    margin: 16px 0;
    color: #fff;
    font-size:18px;
    border-radius: 10px;
}

/* as space between submit button and textarea is large, to reduce the space */
form .btn2{
    padding: 14px 60px;
    font-size: 15px;
    margin-top: 5px;
    cursor: pointer;
}
.copyright{
    width: 100%;
    text-align: center;
    padding: 25px 0;
    background: #262626;
    font-weight: 300;
    /* some space from top */
    margin-top: 20px;
}

/* CSS FOR SMALL SCREEN */
/* use media queries to make the website more responsive */
/* to hide menu bar and cross icon */
nav .fa-solid{
    display: none;
}
@media only screen and (max-width:600px)
{
    /* applicable for small screen */
    #header{
        background-image: url('./bg_phone.jpg');
        /* width: 100px; */ 
        /* height: 600px;
        /* background-position-x: left 50px ; */
        /* margin-left: 280px; */
        /* background-size: cover; */
        background-position: left;
        width: 138px;
        height: 600px;
        margin-left: 213px;
    }
    .header-text{
        margin-top: 100%;
        /* margin-right: 40px; */
        font-size: 11px;
    }
    .header-text p {
    margin-top: -27vh;
    margin-left: 10vh;
    }
    .header-text h1 {
        font-size: 20px;
        margin-left: 5vh;
        margin-top: 10px;
    }
    .ul{
        margin-top: -13px;
    font-size: 18px;
    margin-left: -250vw;
    }
    .logo {
        width: 50vh;
        height: 56vh;
        margin-left: -53vh;
        margin-top: -15vh;
    }
    /* for menu icon, basically the mwnu icon, we hide it so as to not show on bigger screen
    to make it visible, we did display:block */
    nav .fa-solid { 
        display: block;
        font-size: 25px;
        margin-bottom: 128px;
        margin-right: -8px;
    }
    nav ul{
        /* to design menu bar- making ul icons inside menu bar */
        background-color: #9f0e0e;
        position: fixed;
        top: 0;
        /* we shifted towards right */
        /* right: 0; */
        right:-200px;/*to hide the menu bar , but doing this will not open it again */
       /* as widhtL200px so that's why right:-200px */
        width: 200px;
        height: 100vh;
        padding-top: 50px; 
        /*adding js to use feature click menu bar to show or hide icons */
        z-index: 2;
        /* as menu is opening and closing a little late, so */
        transition: right 0.5s;
    }
    nav ul li{
        /* icons arrange vertically */
        display: block;
        margin: 25px;
    }
    /* set position for close icon */
    nav ul .fa-solid{
        position: absolute;
        top: 50px;
        left: 25px;
        cursor: pointer;
    }
    /* now we want to hide the menu bar i.e icons displayed in menu bar, when we click on menu bar, 
    only then icons will be displayed. so for that, change right in nav ul to -200px as width=200px 
    and it'll move oward right side 200 px and will be hiddem */

    .subtitle{
        font-size: 40px;
    }
    /* .about-col-1, .about-col-2{
        flex-basis: 100%;
    } */
    .about-col-1{
        margin-bottom: 30px;
    }
    .about-col-1 img{
        width: 250px;
        margin-left: 40px;
    }

    .about-col-2{
        font-size: 14px;
    }

    .tab-links{
        font-size: 16px;
        margin-right: 20px;

    }

    /* contact form*/
    .contact-left, .contact-right{
        flex-basis: 100%;
    }

    .copyright{
        font-size: 14px;
        width: 100%;
        /* height: 100%; */
        
    }
}
@media only screen and (min-width:414px) and (max-width:896px){
#header{
    background-image: url('./bg_phone.jpg');
    /* width: 100px; */ 
    /* height: 600px;
    /* background-position-x: left 50px ; */
    /* margin-left: 280px; */
    /* background-size: cover; */
    background-position: left;
    width: 138px;
    height: 600px;
    margin-left: 264px; 
}
.logo {
    width: 51vh;
    height: 56vh;
    margin-left: -52vh;
    margin-top: -16vh;
}

}
@media only screen and (min-width:390px) and (max-width:844px){
    #header {
        margin-left: 255px;
    }
    
}
@media only screen and (min-width:360px) and (max-width:740px){
    #header {
        margin-left: 221px;
    }
    .logo {
        margin-left: -53vh;
    }
    
}
@media only screen and (min-width:412px) and (max-width:915px){
    #header {
        margin-left: 277px;
    }
    
    nav .fa-solid {
        margin-bottom: 161px;
    }
    
}
